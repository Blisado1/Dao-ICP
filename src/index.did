type Proposal = record {
  id : int32;
  title : text;
  votes : nat64;
  ends : nat64;
  recipient : text;
  ended : bool;
  executed : bool;
  amount : nat64;
};
type ProposalPayload = record {
  id : int32;
  title : text;
  recipient : text;
  amount : nat64;
};
type _AzleResult = variant { Ok : text; Err : text };
type _AzleResult_1 = variant { Ok : Proposal; Err : text };
type _AzleResult_2 = variant { Ok : vec Proposal; Err : text };
type initPayload = record {
  voteTime : nat64;
  canisterAddress : text;
  quorum : nat64;
  contributionTime : nat64;
};
service : (initPayload) -> {
  createProposal : (ProposalPayload) -> (_AzleResult);
  executeProposal : (int32) -> (_AzleResult);
  getProposal : (int32) -> (_AzleResult_1) query;
  getProposals : () -> (_AzleResult_2) query;
  joinDAO : (nat64) -> (_AzleResult);
  redeemShares : (nat64, text) -> (_AzleResult);
  transferShares : (nat64, principal) -> (_AzleResult);
  voteProposal : (int32) -> (_AzleResult);
}